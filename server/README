Open Audio Server
=================

Dependencies:
-------------

* CMake (minimum v2.8) for the build system

* OpenAL for the backend audio processing 
  http://kcat.strangesoft.net/openal.html

* ALUT for file loading and OpenAL context management
  http://connect.creativelabs.com/openal/Downloads/ALUT/

* MXML (Minimal XML) library for XML parsing
  http://www.minixml.org/

* Optional, but highly recommended: FLTK (v1.3.0) for the GUI 
  http://www.fltk.org/


Installation:
-------------

1.  Change to the build directory, with `cd build`
2.  If you want to configure build options yourself, type `ccmake ..`
    Otherwise, if you want to go with default options, type `cmake ..`
3.  Assuming everything went okay with configuration, you can then compile with
   `make`. With sudo priviledges, you can also install with `make install`
4.  (Optional) To generate documentation with Doxygen, use `make docs`


Set-Up:
-------

Before running the server, you will want to set some runtime options, such as
which port you want the server to listen for connections on. Look at the sample
configuration file `sample_oas_config.xml` to view this and other server 
options.


Running:
--------

Pass the path to your XML configuration file as a command line argument to your
OAS binary executable (i.e. "OAS ~/oas_config.xml")


Usage:
------

The server uses a text (ASCII) based communication protocol to receive
instructions from the client. This allows the client to be even a simple telnet
connection, if desired. To make the client application developer's life easier,
a client API for C++ has also been created. See the ../client/ directory of this 
project for more information.


Client-Server Communication Protocol:
-------------------------------------

Alternatively, if you want to roll your own client interface to communicate with
the server, or if you are developing in a language other than C++, here it is:


        Message         |                      Description
------------------------|------------------------------------------------------
GHDL filename           | Get a handle for a sound source for the <filename>
                        | If <filename> cannot be found in the server's cache
                        | directory, or a sound source cannot be allocated for
                        | <filename>, the server will respond with -1.
                        | Otherwise, the response will be 0,1,2,3, etc.
RHDL handle             | Release resources allocated for the source # <handle>
PLAY handle             | Play the sound source. 
STOP handle             | Stop the sound source
SSPO handle x y z       | Set the sound's position to <x, y, z>
SSVO handle gain        | Set the sound's gain (volume) to <gain>. 0 will mute, 
                        | default is 1



