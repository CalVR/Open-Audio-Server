CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# Set the build type
SET(OAS_DEFAULT_CMAKE_BUILD_TYPE RelWithDebInfo)

IF(DEFINED CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel")
ELSE()
   SET(CMAKE_BUILD_TYPE ${OAS_DEFAULT_CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.")
ENDIF()

# Start defining the project
PROJECT (OASCLIENT)

# Set version numbers
SET(OASCLIENT_MAJOR_VERSION 1)
SET(OASCLIENT_MINOR_VERSION 0)
SET(OASCLIENT_VERSION "${OASCLIENT_MAJOR_VERSION}.${OASCLIENT_MINOR_VERSION}")

# Set cmake module path
SET(CMAKE_MODULE_PATH "${OASCLIENT_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}")

# Set the location of the misc. CMake files
SET(OASCLIENT_CMAKEFILES_DIRECTORY "${OASCLIENT_SOURCE_DIR}/CMake")

# Determine if we should use lib or lib64
SET(LIBDIR "lib")
IF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
    SET(LIBDIR "lib64")
ENDIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")

# Set the location of the library output directory
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/${LIBDIR})

SET(OASCLIENT_LIBRARY_NAME "oasclient")

#### Find relevant packages

# Doxygen
FIND_PACKAGE(DOXYGEN)

IF(DOXYGEN_FOUND)
    SET(OASCLIENT_DOCUMENTATION_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/docs)

    CONFIGURE_FILE(${OASCLIENT_CMAKEFILES_DIRECTORY}/Doxyfile.in
        ${OASCLIENT_DOCUMENTATION_DIRECTORY}/Doxyfile @ONLY
    )

    ADD_CUSTOM_TARGET(docs ${DOXYGEN_EXECUTABLE}
        ${OASCLIENT_DOCUMENTATION_DIRECTORY}/Doxyfile 
        WORKING_DIRECTORY ${OASCLIENT_DOCUMENTATION_DIRECTORY}
        COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
ENDIF(DOXYGEN_FOUND)

# OSG 
FIND_PACKAGE(OSG)

IF(OSG_FOUND)
    OPTION(BUILD_WITH_OSG_SUPPORT "Let sound nodes be a part of the scenegraph" ON)
ENDIF(OSG_FOUND)


# Build examples option - default off
OPTION(BUILD_EXAMPLES "Build examples that use the OASClient library" OFF)

# Generate the config file, to resolve dependencies at compile-time
CONFIGURE_FILE(${OASCLIENT_CMAKEFILES_DIRECTORY}/config.h.in
    ${CMAKE_CURRENT_SOURCE_DIR}/src/config.h)

IF(BUILD_WITH_OSG_SUPPORT)
    SET(TARGET_H
        ${OASCLIENT_SOURCE_DIR}/src/OASClientInterface.h
        ${OASCLIENT_SOURCE_DIR}/src/OASSound.h
        ${OASCLIENT_SOURCE_DIR}/src/OASSoundUpdateCallback.h
        )

    SET(TARGET_SRC
        ${OASCLIENT_SOURCE_DIR}/src/OASClientInterface.cpp
        ${OASCLIENT_SOURCE_DIR}/src/OASSound.cpp
        ${OASCLIENT_SOURCE_DIR}/src/OASSoundListener.cpp
        ${OASCLIENT_SOURCE_DIR}/src/OASSoundUpdateCallback.cpp
        )
ELSE(BUILD_WITH_OSG_SUPPORT)
    SET(TARGET_H
        ${OASCLIENT_SOURCE_DIR}/src/OASClientInterface.h
        ${OASCLIENT_SOURCE_DIR}/src/OASSound.h
        )

    SET(TARGET_SRC
        ${OASCLIENT_SOURCE_DIR}/src/OASClientInterface.cpp
        ${OASCLIENT_SOURCE_DIR}/src/OASSound.cpp
        ${OASCLIENT_SOURCE_DIR}/src/OASSoundListener.cpp
        )
ENDIF(BUILD_WITH_OSG_SUPPORT)

INCLUDE_DIRECTORIES(src)

ADD_LIBRARY(${OASCLIENT_LIBRARY_NAME} SHARED ${TARGET_SRC} ${TARGET_H})

IF(BUILD_WITH_OSG_SUPPORT)
    INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${OASCLIENT_LIBRARY_NAME} ${OSG_LIBRARIES})
ENDIF(BUILD_WITH_OSG_SUPPORT)

INSTALL(TARGETS ${OASCLIENT_LIBRARY_NAME} DESTINATION "${CMAKE_INSTALL_PREFIX}/${LIBDIR}")

IF(BUILD_WITH_OSG_SUPPORT)
    INSTALL(DIRECTORY src/ DESTINATION ${CMAKE_INSTALL_PREFIX}/include/OAS
            FILE_PERMISSIONS    OWNER_WRITE OWNER_READ 
                                GROUP_READ 
                                WORLD_READ
            DIRECTORY_PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
                                  GROUP_EXECUTE GROUP_READ
                                  WORLD_EXECUTE WORLD_READ
            FILES_MATCHING PATTERN "*.h")
ELSE(BUILD_WITH_OSG_SUPPORT)
    INSTALL(DIRECTORY src/ DESTINATION ${CMAKE_INSTALL_PREFIX}/include/OAS
                FILE_PERMISSIONS    OWNER_WRITE OWNER_READ 
                                GROUP_READ 
                                WORLD_READ
            DIRECTORY_PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
                                  GROUP_EXECUTE GROUP_READ
                                  WORLD_EXECUTE WORLD_READ
            FILES_MATCHING PATTERN "*.h"
            EXCLUDE "OASSoundUpdateCallback.h")
ENDIF(BUILD_WITH_OSG_SUPPORT)


IF(BUILD_EXAMPLES)
    ADD_SUBDIRECTORY(examples)
ENDIF(BUILD_EXAMPLES)


